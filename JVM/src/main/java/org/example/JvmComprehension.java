package org.example;

public class JvmComprehension {
    //Класс JvmComprehension передается для загрузки в систему ClassLoader, данные о классе (название, методы, поля, константы и пр.)
    //сохраняются в Metaspace.

    public static void main(String[] args) {
        //В момент вызова метода main() создается фрейм в стеке
        int i = 1;                      // 1) Так как int значимый (примитивный) тип данных, переменная будет храниться в стеке во фрейме main().
                                        // Т.е. создалась переменная "i" типа int и ей было присвоено значение "1".

        Object o = new Object();        // 2) Создается объект класса Object (правая часть равенства), ссылочный тип данных. При создании объекта
                                        // в куче (heap) выделяется память под этот объект (new), затем происходит вызов конструктора (Object()).
                                        // В стеке во фрейме main() создается переменная "о" (левая чатсть равенства), которая ссылается на этот объект в куче.

        Integer ii = 2;                 // 3) В куче создается объект Integer со значением 2, так как Integer - ссылочный тип данных,
                                        // а в стеке во фрейме main() появляется переменная "ii" со ссылкой на этот объект.

        printAll(o, i, ii);             // 4) В стеке создается фрейм printAll(),куда передается переменная int i и ссылки на Object o,
                                        // и Integer ii.

        System.out.println("finished"); // 7) В стеке создается фрейм println(), которому передается ссылка на созданный в куче объект String
                                        // со значением "finished".
                                        // В ходе работы программы отрабатывает Garbage Collector
    }

    private static void printAll(Object o, int i, Integer ii) {
        //В момент вызова метода printAll() создается фрейм в стеке
        Integer uselessVar = 700;        // 5) В куче создается объект Integer со значением 700, а в стеке
                                         // во фрейме printAll() появляется переменная "uselessVar" со ссылкой на этот объект.
        System.out.println(o.toString() + i + ii);  // 6) В стеке создается фрейм println(), куда передается переменная int i и ссылки на Object o
                                        // и Integer ii. У Object o вызывается метод toString() и в стеке созается фрейм toString().
    }
}